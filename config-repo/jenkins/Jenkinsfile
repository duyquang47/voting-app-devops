pipeline {
  agent {
    kubernetes {
      yamlFile 'jenkins-agent-pod.yaml'
    }
  }

  environment {
    DOCKERHUB_USERNAME = 'quang47'
    GIT_CONFIG_REPO_CREDENTIALS_ID = 'github'
    GIT_CONFIG_REPO_URL = 'https://github.com/duyquang47/voting-app-devops.git'
  }

  stages {
    stage('Checkout Source Code') {
      steps {
        echo 'Checking out source code...'
        checkout scm
      }
    }

    stage('Get Git Commit') {
      steps {
        container('git') {
          script {
            def workspacePath = sh(script: 'pwd', returnStdout: true).trim()
            echo "Current workspace: ${workspacePath}"
            
            sh "git config --global --add safe.directory '${workspacePath}'"
            sh 'git config --global user.email "jenkins@example.com"'
            sh 'git config --global user.name "Jenkins CI"'
            
            sh 'git config --global safe.directory "*"'
            
            env.GIT_COMMIT_SHORT = sh(script: 'git rev-parse HEAD', returnStdout: true).trim().substring(0, 8)
            echo "Git commit: ${env.GIT_COMMIT_SHORT}"
          }
        }
      }
    }

    stage('Build and Push Images with Kaniko') {
      steps {
        container('kaniko') {
          script {
            def services = ['vote', 'result']

            services.each { service ->
              def imageName = "${DOCKERHUB_USERNAME}/voting-app_${service}:${env.GIT_COMMIT_SHORT}"
              def dockerfilePath = "source-repo/${service}/Dockerfile"
              def contextPath = "source-repo/${service}"

              echo "Building image ${imageName} ..."

              sh """
                /kaniko/executor \
                  --dockerfile=${dockerfilePath} \
                  --context=${contextPath} \
                  --destination=${imageName} \
                  --verbosity=info
              """
            }
          }
        }
      }
    }

    stage('Update K8s Manifests') {
      steps {
        script {
          withCredentials([usernamePassword(
              credentialsId: GIT_CONFIG_REPO_CREDENTIALS_ID,
              usernameVariable: 'GIT_USER',
              passwordVariable: 'GIT_PASS'
          )]) {

          container('yq') {
            dir('config-repo') {
              echo "Updating helm/values.yaml with yq..."
              def services = ['vote', 'result']
              def valueFile = "helm/values.yaml"

              services.each { service ->
                def imageNameOnly = "${DOCKERHUB_USERNAME}/voting-app_${service}"
                def imageTag = env.GIT_COMMIT_SHORT
                
                echo "Updating ${service} -> image: ${imageNameOnly}, tag: ${imageTag}"
                
                sh "yq e -i '.${service}.image = \"${imageNameOnly}\"' ${valueFile}"
                sh "yq e -i '.${service}.tag = \"${imageTag}\"' ${valueFile}"
              }
            }
          }

          container('git') {
            dir('config-repo') {
              echo "Committing and pushing changes..."
              sh "git config user.email 'jenkins-ci-bot@example.com'"
              sh "git config user.name 'Jenkins CI Bot'"
              sh """
              if ! git diff --quiet helm/values.yaml; then
                  git add helm/values.yaml
                  git commit -m "CI: Update image tags to ${env.GIT_COMMIT_SHORT}"
                  git push origin HEAD:main
                else
                    echo "No changes detected. Skipping commit."
                fi
                """
              }
            }
          }
        }
      }
    }
  }
  post {
    success {
      echo "Pipeline completed successfully! Build #${env.BUILD_NUMBER}"
      echo "Git commit: ${env.GIT_COMMIT_SHORT}"
    }
    failure {
      echo "Pipeline failed! Build #${env.BUILD_NUMBER}"
    }
    always {
      echo 'Clean workspaces.'
      cleanWs()
    }
  }
}